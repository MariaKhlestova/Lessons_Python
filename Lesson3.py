# Практическая работа. Семинар 3. Списки и словари.

sp = list()
sp = [-1, True, "Hello", 5.77, 8.999, "world"]
"""
print(sp)
print(sp[2:5])

for i in range(len(sp)):
    print(f"{i} - {sp[i]}")

for el in sp:
    print(el, end = ' ')
print(end = '\n')

sp.append('last') # добавляет элемент в конец
sp.insert(0, 'first') # добавляет в любое место
# print(sp)

sp.remove(True)
del sp[0]
# print(sp)

a = sp.pop()
# print(a)
# print(sp)
"""

# Кортежи (удобно передавать данные между приложениями, настройки)
t = tuple(sp)
# print(t)
# print('Hi' in t)
# print('Hello' in t)

d = {}
d['дядя Ваня'] = 868686
d['дядя Вася'] = 212121
# print(d)
# print(list(d.keys()))
# print(d.keys()) # хотим получить информацию обо всех ключах
# print(d.values()) # хотим получить информацию о значениях
# for i in d:
#    print(i)
# for key, value in d.items(): # метод items()
#    print(f"{key} - {value}")

# Множество
"""
s = {1,1,1,1,5,5,8,8,8,8,8}

s.add(7)
s.discard(1)
s.discard(2)

print(s)

"""
# Задачи:
# 2. Дана последовательность из N целых чисел и число K. Необходимо сдвинуть всю последовательность (сдвиг - циклический) 
# на K элементов вправо, K – положительное число.
# Input: [1, 2, 3, 4, 5] k = 3
# Output: [4, 5, 1, 2, 3]

# k = int(input('Введите число k: '))
# s = [1, 2, 3, 4, 5]

# for _ in range (k) :
#    s.insert(0, s.pop())

# print(s)

# k = int(input('Введите число k: '))
# s = [1, 2, 3, 4, 5]

# print (f"[{*s[k+1:], *s[:k+1]}]")

# new_sp = sp = s[-k:] + s[:-k]
# print(new_sp)

# 3. Напишите программу для печати всех уникальных значений в словаре.
# Input: [{"V": "S001"}, {"V": "S002"}, {"VI": "S001"},
# {"VI": "S005"}, {"VII": " S005 "}, {" V ":" S009 "}, {" VIII ":" S007 "}]
# Output: {'S005', 'S002', 'S007', 'S001', 'S009'}
"""
d = [{"V": "S001"}, {"V": "S002"}, {"VI": "S001"}, {"VI": "S005"}, {"VII": " S005 "}, {" V ":" S009 "}, {" VIII ":" S007 "}]
s = set()

for i in d:
    for key, value in i.items():
        s.add(value.strip())
print(s)
"""
# 
# Домашнее задание

# Задача 1: Видеокарты
# В базе магазина электроники есть список видеокарт компании NVIDIA разных поколений. 
# Вместо полных названий хранятся только числа, которые обозначают модель и поколение видеокарты. 
# Недавно компания выпустила новую линейку видеокарт. Самые старшие поколения разобрали за пару дней.
# Напишите программу, которая удаляет наибольшие элементы из списка видеокарт.

videoCardsNumber = int(input("Введите количество видеокарт: "))
videoCards = []
newVideoCardsList = []
maxItem = 0

for item in range (videoCardsNumber):
    videoCards.append(int(input(f'Видеокарта {item + 1}: ')))
   
    if videoCards[item] > maxItem:
        maxItem = videoCards[item]
        
for item in range (videoCardsNumber):
    if videoCards[item] != maxItem:
        newVideoCardsList.append(videoCards[item])

print()
print("Старый список видеокарт: [", end=' ')
for item in range (videoCardsNumber):
    print(videoCards[item], end=' ')
print(']')
print("Новый список видеокарт: [", end=' ')
for item in range (len(newVideoCardsList)):
    print(newVideoCardsList[item], end=' ')
print(']')

# Задача 2: Кино
# Илья зашёл на любительский киносайт, на котором пользователи оставляют рецензии на фильмы. 
# Их список: films = [‘Крепкий орешек’, ‘Назад в будущее’, ‘Таксист’, ‘Леон’, ‘Богемская рапсодия’, ‘Город грехов’, ‘Мементо’, ‘Отступники’, ‘Деревня’]
# Илья на сайте в первый раз. Он хочет зарегистрироваться и сразу добавить часть фильмов в список любимых, 
# чтобы позже прочитать рецензии на них.
# Напишите программу, в которой пользователь вводит фильм. Если кинокартина есть в перечне, 
# то добавляется в список любимых. Если её нет, то выводится ошибка. В конце выведите весь список любимых фильмов.

# Задача 3: Сортировка
# Дан список из N чисел. Напишите программу, которая сортирует элементы списка по возрастанию и выводит их на экран. 
# Дополнительный список использовать нельзя.
# Также нельзя использовать готовые функции sorted/min/max и метод sort
# Постарайтесь придумать и написать как можно более эффективный алгоритм сортировки.

# Задача 4: Товары
# В базе данных магазина вся необходимая информация по товарам делится на два словаря: 
# первый отвечает за коды товаров, второй — за списки количества разнообразных товаров на складе: ...

# Задача 5: Пицца
# В базе данных интернет-магазина PizzaTime хранятся сведения о том, кто, что и сколько заказывал у них в определённый период. 
# Вам нужно структурировать эту информацию и определить, сколько всего пицц купил каждый заказчик.
# На вход в программу подаётся N заказов. Каждый заказ представляет собой строку вида «Покупатель — название пиццы — количество заказанных пицц».
# Реализуйте код, который выводит список покупателей и их заказов по алфавиту. 
# Учитывайте, что один человек может заказать одну и ту же пиццу несколько раз.

# Дополнительная задача 1: НЕГАФИБОНАЧЧИ
# Задайте число. Составьте список чисел Фибоначчи, в том числе для отрицательных индексов.
# Пример:
# для k = 9 список будет выглядеть так: 
# [-21 ,13, -8, 5, −3, 2, −1, 1, 0, 1, 1, 2, 3, 5, 8, 13, 21] [Негафибоначчи]​
"""
def fibonacci_with_negatives(n):
Создаем массив для хранения чисел Фибоначчи от -n до n
fib = [0] * (2 * n + 1)

# Индекс 0 в списке соответствует F(-n),
# а индекс n в списке соответствует F(0)
fib[n] = 0
fib[n + 1] = 1

# Вычисление положительных чисел Фибоначчи
for i in range(n + 2, 2 * n + 1):
fib[i] = fib[i - 1] + fib[i - 2]

# Вычисление отрицательных чисел Фибоначчи (негафибоначчи)
for i in range(n - 1, -1, -1):
fib[i] = fib[i + 2] - fib[i + 1]

return fib

# Задаем число n
n = int(input("Введите число n: "))
fib_sequence = fibonacci_with_negatives(n-1)
print("Числа Фибоначчи от -n до n:", fib_sequence)
"""
# Дополнительная задача 2: Последовательность
# Имеется список случайных целых чисел. Создайте список, в который попадают числа, описывающие максимальную сплошную возрастающую последовательность. 
# Порядок элементов менять нельзя. Одно число - это не последовательность.
# Пример:
# [1, 5, 2, 3, 4, 6, 1, 7] => [1, 7] так как здесь вразброс присутствуют все числа от 1 до 7
# [1, 5, 2, 3, 4, 1, 7, 8 , 15 , 1 ] => [1, 5] так как здесь есть числа от 1 до 5 и эта последовательность длиннее чем от 7 до 8
# [1, 5, 3, 4, 1, 7, 8 , 15 , 1 ] => [3, 5] так как здесь есть числа от 3 до 5 и эта последовательность длиннее чем от 7 до 8

# Дополнительная задача 3: Спираль
# Выведите таблицу размером n×n, заполненную числами от 1 до n**2 по спирали, 
# выходящей из левого верхнего угла и закрученной по часовой стрелке, как показано в примере (здесь n=5):
# 1 2 3 4 5
# 16 17 18 19 6
# 15 24 25 20 7
# 14 23 22 21 8
# 13 12 11 10 9

# Дополнительная задача 4: XO
# Сделайте игру крестики - нолики, человек должен играть с ботом, поле 3*3.
# Конечно, бот не должен ходить на занятые поля
# Если есть желание, то можете наделить бота псевдоинтеллектом,чтоб он ходил как можно ближе к своим занятым клеткам
# После каждого хода на экран должна выводиться текущая обстановка на поле.
# Например,
# | | Х |
# | | O |
# | | O |
# При ходе пользователя у надо спрашивать номер строки и столбца, куда он хочет сделать ход